#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express-skeleton-3:server");
var http = require("http");
const { join } = require("node:path");
const { Server } = require("socket.io");
const Message = require("../models/message/index");
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

/**
 * Listen on provided port, on all network interfaces.
 */

io.on("connection", async (socket) => {
  console.log("a user connected---------->", socket.id);

  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
  socket.on("chat message", async (msg) => {
    try {
      const message = new Message({ content: msg });
      result = await message.save();
    } catch (error) {}
    io.emit("chat message", msg, result._id.toString());
  });

  if (!socket.recovered) {
    // If the connection state recovery was not successful
    try {
      const serverOffset =
        socket.handshake.auth.serverOffset || new mongoose.Types.ObjectId(0);
      // console.log(socket.handshake.headers);

      const messages = await Message.find({
        _id: { $gt: serverOffset },
      }).exec();

      messages.forEach((doc) => {
        socket.emit("chat message", doc.content, doc._id.toString());
      });

      socket.recovered = true;
    } catch (e) {
      console.error(e);
    }
  }
});

server.listen(port, () => {
  console.log(`server running at http://localhost:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
